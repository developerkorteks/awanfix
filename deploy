#!/bin/bash

# RcloneStorage One-Click Deployment Script
# Usage: ./deploy

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

echo ""
echo "🚀 === RcloneStorage One-Click Deployment ==="
echo ""

# Check prerequisites
print_step "1. Checking prerequisites..."
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

print_status "✅ Docker and Docker Compose are available"

# Setup directories and permissions
print_step "2. Setting up directories and permissions..."
mkdir -p cache/{files,metadata,temp} configs data logs
chmod -R 755 cache data logs 2>/dev/null || true
print_status "✅ Directories created"

# Setup environment
print_step "3. Setting up configuration..."
if [ ! -f ".env" ]; then
    cp .env.example .env
fi
sed -i 's/API_PORT=.*/API_PORT=5601/' .env

# Setup rclone config
if [ ! -f "configs/rclone.conf" ]; then
    print_status "Creating default rclone.conf for testing..."
    cat > configs/rclone.conf << 'EOF'
# RcloneStorage Configuration
# For testing with local filesystem

[local]
type = local
nounc = true

[union]
type = union
upstreams = local:

# Add your cloud storage providers here:
# [mega1]
# type = mega
# user = your-email@example.com
# pass = your-encrypted-password
EOF
    print_status "✅ Created rclone.conf with local storage for testing"
else
    print_status "✅ Using existing rclone.conf"
fi

# Deploy with Docker
print_step "4. Deploying with Docker..."
docker-compose down 2>/dev/null || true
docker-compose up -d --build

# Fix permissions
print_step "5. Fixing permissions..."
sleep 10  # Wait for container to start
docker-compose exec --user root rclonestorage sh -c "
    chown -R appuser:appgroup /app/cache /app/data /app/logs && 
    chmod -R 755 /app/cache /app/data /app/logs && 
    chmod 664 /app/data/auth.db 2>/dev/null || true
" 2>/dev/null || print_warning "Could not fix permissions automatically"

# Wait for service
print_step "6. Waiting for service to be ready..."
for i in {1..30}; do
    if curl -s http://localhost:5601/health > /dev/null 2>&1; then
        print_status "✅ Service is ready!"
        break
    fi
    echo -n "."
    sleep 2
done

if ! curl -s http://localhost:5601/health > /dev/null 2>&1; then
    print_error "Service failed to start. Check logs: docker-compose logs"
    exit 1
fi

# Test functionality
print_step "7. Testing functionality..."

# Health check
HEALTH=$(curl -s http://localhost:5601/health | jq -r '.status // "failed"' 2>/dev/null || echo "failed")
if [ "$HEALTH" = "ok" ]; then
    print_status "✅ Health check passed"
else
    print_warning "⚠️  Health check failed"
fi

# Test upload
echo "test upload" > /tmp/deploy_test.txt 2>/dev/null || true
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:5601/api/auth/login \
    -H "Content-Type: application/json" \
    -d '{"email":"admin@rclonestorage.local","password":"Admin123!"}' 2>/dev/null || echo "")

if echo "$LOGIN_RESPONSE" | grep -q '"token"' 2>/dev/null; then
    TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token' 2>/dev/null || echo "")
    if [ ! -z "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
        UPLOAD_RESPONSE=$(curl -s -X POST http://localhost:5601/api/v1/upload \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@/tmp/deploy_test.txt" 2>/dev/null || echo "")
        
        if echo "$UPLOAD_RESPONSE" | grep -q '"uploaded_to_cloud"' 2>/dev/null; then
            print_status "✅ Upload functionality working"
        else
            print_warning "⚠️  Upload test failed"
        fi
    fi
fi

rm -f /tmp/deploy_test.txt 2>/dev/null || true

# Success message
echo ""
print_step "🎉 Deployment completed successfully!"
echo ""
print_status "🌐 Service URLs:"
echo "  • Web Interface: http://localhost:5601"
echo "  • API Documentation: http://localhost:5601/swagger/index.html"
echo "  • Health Check: http://localhost:5601/health"
echo ""
print_status "🔑 Default Credentials:"
echo "  • Email: admin@rclonestorage.local"
echo "  • Password: Admin123!"
echo ""
print_status "📋 Management Commands:"
echo "  • View logs: docker-compose logs -f"
echo "  • Restart: docker-compose restart"
echo "  • Stop: docker-compose down"
echo ""
print_warning "📝 Next Steps:"
echo "  1. Configure your cloud storage in configs/rclone.conf"
echo "  2. Restart the service: docker-compose restart"
echo "  3. Change default admin password"
echo ""
print_status "🚀 RcloneStorage is ready to use!"
echo ""